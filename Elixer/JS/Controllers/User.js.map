{"version":3,"sources":["Global.js","app.js","AuthController.js","UserController.js","SellerRefundFormController.js","ManageUserController.js","WarehouseController.js","NotificationController.js","UploaderController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClthfile":"User.js","sourcesContent":["/*Global Variable*/\r\nvar user,NotificationInterval;\r\n\r\n/*Global Function*/\r\nfunction Logout($auth,$rootScope,$state) {\r\n    $.get(configuration.path + '/logout?token=' + $auth.getToken());\r\n    $auth.logout().then(function() {\r\n        if(getCookie('Role')=='Seller'){\r\n            clearInterval(NotificationInterval);\r\n        }\r\n        eraseCookie('Role');\r\n        localStorage.removeItem('user');\r\n        $rootScope.authenticated = false;\r\n        $rootScope.currentUser = null;\r\n        $state.go('auth');\r\n    });\r\n}\r\n\r\nfunction createCookie(name,value,days) {\r\n    if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime()+(days*24*60*60*1000));\r\n        var expires = \"; expires=\"+date.toGMTString();\r\n    }\r\n    else var expires = \"\";\r\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var nameEQ = name + \"=\";\r\n    var ca = document.cookie.split(';');\r\n    for(var i=0;i < ca.length;i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction eraseCookie(name) {\r\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';\r\n}\r\nfunction Back($state) {\r\n    if( window.history.back()== undefined)\r\n    {\r\n        $state.go('users');\r\n    }\r\n    else\r\n        window.history.back();\r\n\r\n}\r\n","\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp', ['ui.router', 'satellizer','angularFileUpload'])\r\n        .config(function($stateProvider, $urlRouterProvider, $authProvider, $httpProvider, $provide,$locationProvider) {\r\n\r\n            function redirectWhenLoggedOut($q, $injector) {\r\n\r\n                return {\r\n                    responseError: function(rejection) {\r\n                        var $state = $injector.get('$state');\r\n                        var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];\r\n                        angular.forEach(rejectionReasons, function(value, key) {\r\n                            if(rejection.data.error === value) {\r\n                                localStorage.removeItem('user');\r\n                                $state.go('auth');\r\n                            }\r\n                        });\r\n                        return $q.reject(rejection);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            $provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);\r\n            $httpProvider.interceptors.push('redirectWhenLoggedOut');\r\n            $authProvider.loginUrl = configuration.path+'/api/authenticate';\r\n            $urlRouterProvider.otherwise('/auth');\r\n            $stateProvider\r\n                .state('auth', {\r\n                    url:'/auth',\r\n                    templateUrl: '../resources/views/AuthView.blade.php',\r\n                    controller: 'AuthController as auth'\r\n                })\r\n                .state('users', {\r\n                    url: '/users',\r\n                    templateUrl: '../resources/views/UserView.blade.php',\r\n                    controller: 'UserController as user'\r\n                })\r\n                .state('sellerrefundform', {\r\n                    url: '/sellerrefundform',\r\n                    templateUrl: '../resources/views/SellerRefundForm.blade.php',\r\n                    controller: 'SellerRefundFormCtrl as sellerrefundform'\r\n                })\r\n                .state('manageuser', {\r\n                    url: '/manageuser',\r\n                    templateUrl: '../resources/views/ManageUser.blade.php',\r\n                    controller: 'ManageUserCtrl as manageuser'\r\n                })\r\n                .state('warehouse', {\r\n                    url: '/warehouse',\r\n                    templateUrl: '../resources/views/Warehouse.blade.php',\r\n                    controller: 'WarehouseCtrl as warehouse'\r\n                })\r\n                .state('notification', {\r\n                url: '/notification',\r\n                templateUrl: '../resources/views/Notification.blade.php',\r\n                controller: 'NotificationCtrl as notification'\r\n                 })\r\n                .state('upload', {\r\n                    url: '/upload',\r\n                    templateUrl: '../resources/views/Uploader.blade.php',\r\n                    params: {\r\n                        'casedId':-1\r\n                    }\r\n                })\r\n                ;\r\n        })\r\n        .run(function($rootScope, $state) {\r\n            $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState) {\r\n                $('.ui-dialog').remove();\r\n                 user = JSON.parse(localStorage.getItem('user'));\r\n                if(user) {\r\n                    $rootScope.authenticated = true;\r\n                    $rootScope.currentUser = user;\r\n                    if(toState.name === \"auth\") {\r\n                        event.preventDefault();\r\n                        if(fromState.name === \"\"){\r\n                            $state.go('users');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n})();","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('AuthController', AuthController);\r\n\r\n\r\n    function AuthController($auth, $state, $http, $rootScope) {\r\n        var vm = this;\r\n        vm.loginError = false;\r\n        vm.loginErrorText;\r\n        vm.login = function() {\r\n            var credentials = {\r\n                email: vm.email,\r\n                password: vm.password\r\n            };\r\n\r\n            $auth.login(credentials).then(function() {\r\n\r\n                // Return an $http request for the now authenticated\r\n                // user so that we can flatten the promise chain\r\n                return $http.get(configuration.path+'/api/authenticate/user?token='+$auth.getToken()).then(function(response) {\r\n\r\n\r\n                    // Stringify the returned data to prepare it\r\n                    // to go into local storage\r\n                    var user = JSON.stringify(response.data.user);\r\n\r\n\r\n                    // Set the stringified user data into local storage\r\n                    localStorage.setItem('user', user);\r\n\r\n                    // The user's authenticated state gets flipped to\r\n                    // true so we can now show parts of the UI that rely\r\n                    // on the user being logged in\r\n                    $rootScope.authenticated = true;\r\n\r\n                    // Putting the user's data on $rootScope allows\r\n                    // us to access it anywhere across the app\r\n                    $rootScope.currentUser = response.data.user;\r\n\r\n                    // Everything worked out so we can now redirect to\r\n                    // the users state to view the data\r\n                    $http.get(configuration.path+'/api/GetRole?token='+$auth.getToken()).success(function (data) {\r\n                        createCookie('Role',data);\r\n                        if(data != 'Warehouse')\r\n                            $state.go('users');\r\n                        else if(data == 'Warehouse')\r\n                            $state.go('warehouse');\r\n                    }).error(function(error) {\r\n                        vm.loginError = true;\r\n                        vm.loginErrorText ='Role Not Assigned!';\r\n                        Logout($auth,$rootScope,$state);\r\n                    });\r\n                });\r\n\r\n                // Handle errors\r\n            }, function(error) {\r\n                vm.loginError = true;\r\n                vm.loginErrorText = error.data.error;\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n})();","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('UserController', UserController).directive('message', function() {\r\n        var directive = {};\r\n        directive.template = '<div class=\"media-body\"><span class=\"text-muted pull-right\"><small class=\"text-muted\">{{message.DateTime}}</small></span><strong class=\"text-success\">@{{message.From_name}}</strong><p>{{message.Message}}</p></div><hr>';\r\n        return directive;\r\n    });\r\n\r\n    function UserController($http, $auth, $rootScope, $state) {\r\n        if(user && getCookie('Role') !=null) {\r\n            var vm = this;\r\n            vm.CasesGrid = [];\r\n            vm.reasons = [];\r\n            vm.wishes = [];\r\n            vm.conditions = [];\r\n            vm.Messages='';\r\n            vm.Role=getCookie('Role');\r\n            vm.NotificationCount=0;\r\n            vm.NotificationBoxToggle=true;\r\n            vm.AddImage=function (id) {\r\n                $state.go('upload',{ casedId:id });\r\n            };\r\n            vm.refresh = function() {\r\n                vm.CasesGrid = [];\r\n                $http.get(configuration.path + '/Seller/AllCases/' + user.id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    $.each(data, function (index) {\r\n                        var detail = JSON.parse(data[index].RefundCaseDetail);\r\n                        var id = JSON.parse(data[index].RefundCase_Id);\r\n                        detail.Id = id;\r\n                        detail.IsLabelGenerated=data[index].RefundCaseStatusKey==\"\"?false:true;\r\n                        vm.CasesGrid.push(detail);\r\n                    });\r\n\r\n                });\r\n            };\r\n            vm.refresh();\r\n            vm.ReGetNotificationCount=function () {\r\n\r\n                    $http.get(configuration.path + '/Communication/GetNotificationCount/' + user.id + '?token=' + $auth.getToken()).success(function (data) {\r\n                        vm.NotificationCount = data;\r\n                    });\r\n\r\n            };\r\n            vm.ReGetNotificationCount();\r\n            NotificationInterval=setInterval(function(){  vm.ReGetNotificationCount(); }, 300000);\r\n            vm.AllNotifications=function () {\r\n                $state.go('notification');\r\n            };\r\n            vm.ShowNotifications=function () {\r\n                vm.HideDialog();\r\n                if(vm.NotificationBoxToggle){\r\n                    vm.NotificationBoxToggle=false;\r\n                vm.Messages='';\r\n                $http.get(configuration.path+'/Communication/GetTopFiveNotifications/'+user.id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                  if(notifications.data.length>0) {\r\n                      vm.Messages = notifications.data;\r\n                      $('#messageDiv').dialog({\r\n                          width: 300, height: 300, overflow: \"auto\", position: {\r\n                              my: 'top',\r\n                              at: 'bottom',\r\n                              of: $('#notificationBtn')\r\n                          }, buttons: {\r\n                              'ShowAll': function () {\r\n                                  vm.HideDialog();\r\n                                  vm.NotificationBoxToggle=true;\r\n                                  vm.AllNotifications();\r\n                              },\r\n                              'Mark All as Read': function () {\r\n                                  $http.get(configuration.path + '/Communication/MarkAllNotificationRead/' + user.id + '?token=' + $auth.getToken()).success(function () {\r\n                                      vm.HideDialog();\r\n                                      vm.NotificationBoxToggle=true;\r\n                                      vm.ReGetNotificationCount();\r\n                                  });\r\n                              }\r\n                          }\r\n                      });\r\n                      $('#messageDiv').dialog('open');\r\n                      $(\".ui-dialog-titlebar\").remove();\r\n                  }\r\n                });\r\n                }else{\r\n                    vm.NotificationBoxToggle=true;\r\n                }\r\n\r\n            };\r\n            vm.HideDialog=function () {\r\n               if($(\"#messageDiv\").hasClass('ui-dialog-content')){\r\n                   $('#messageDiv').hide();\r\n                   $('#messageDiv').dialog(\"destroy\");\r\n               }\r\n\r\n           };\r\n            $http.get(configuration.path+'/wish').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.wishes.push(data[index].Wish);\r\n                });\r\n            });\r\n            $http.get(configuration.path+'/reason').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.reasons.push(data[index].Reason);\r\n                });\r\n            });\r\n            $http.get(configuration.path+'/itemCondition').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.conditions.push(data[index].ItemCondition);\r\n                });\r\n            });\r\n            vm.ToSellerForm = function () {\r\n                if ($rootScope.authenticated)\r\n                    $state.go('sellerrefundform');\r\n                else\r\n                    vm.logout();\r\n            };\r\n            vm.ToUserGrid=function () {\r\n                if ($rootScope.authenticated && vm.Role==\"Admin\")\r\n                    $state.go('manageuser');\r\n                else\r\n                    vm.logout();\r\n            };\r\n            vm.ToWarehouseGrid=function () {\r\n                if ($rootScope.authenticated && vm.Role==\"Admin\")\r\n                    $state.go('warehouse');\r\n                else\r\n                    vm.logout();\r\n            };\r\n            vm.EditCase=function (Data) {\r\n                vm.EditFormData='';\r\n                vm.EditFormData=Data;\r\n\r\n                var editBox=$('#editDiv');\r\n                editBox.dialog({width:700,close:vm.refresh});\r\n                editBox.dialog('open');\r\n            };\r\n            vm.SubmitEditedForm=function () {\r\n                var id=vm.EditFormData.Id;\r\n                /*Delete unwanted properties*/\r\n                delete vm.EditFormData.Id;\r\n                delete vm.EditFormData.IsLabelGenerated;\r\n\r\n                var editBox=$('#editDiv');\r\n                editBox.dialog('destroy');\r\n                $http.post(configuration.path+'/Seller/UpdateCaseData/'+id+ '?token=' + $auth.getToken(), JSON.stringify(vm.EditFormData)).success(function(data){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.GetLink=function (id) {\r\n                $http.get(configuration.path + '/Seller/GetLink/' +id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    $('<div />').html(data).dialog({\r\n                        title: 'Copy & Send To Customer', width: $(window).width() - 20,\r\n                        height: 200\r\n                    });\r\n                });\r\n            };\r\n            vm.DeleteCase=function (id) {\r\n                $http.get(configuration.path + '/Seller/DeleteCase/' +id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.ShowMessages=function (id) {\r\n                vm.HideDialog();\r\n                vm.NotificationBoxToggle=true;\r\n                vm.Messages='';\r\n                $http.get(configuration.path + '/Communication/GetAllMessage/' +id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    if(data.length>0){\r\n                    vm.Messages=data;\r\n                    $('#messageDiv').dialog({width:400,title:'Messages',height:500, overflow:\"auto\"});\r\n                    $('#messageDiv').dialog('open');\r\n                    }\r\n                });\r\n            };\r\n            vm.ShowImages=function (id) {\r\n                $http.get(configuration.path + '/File/GetAllImages/' +id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    var div = $(\"<div id='allimages'></div>\");\r\n                    $.each(data, function (i, el) {\r\n                        div.append(\"<a target='_blank' href=\"+el.Image_Path+\"\\\\\"+ el.Image_Name +\" ><img src=\"+el.Image_Path+\"\\\\\"+ el.Image_Name +\" style='height: 60px;width: 60px;margin:10px;border:2px solid black;border-radius: 5px;' /></a>\");\r\n                    });\r\n                    $('<div />').html(div).dialog();\r\n                });\r\n            };\r\n            vm.CreateNotification=function () {\r\n                $http.get(configuration.path + '/Seller/GetAllAdmins?token=' + $auth.getToken()).success(function (data) {\r\n                    vm.AllSellers=data;\r\n                    var combo = $(\"<select class='form-control' id='allAdmin'></select>\");\r\n                    $.each(vm.AllSellers, function (i, el) {\r\n                        combo.append(\"<option id=\"+ el.id +\">\" + el.name + \"</option>\");\r\n                    });\r\n                    var textArea  = $('<textarea style=\"width: 600px; height: 200px;margin: 2%\" class=\"msgAdminText\"/>');\r\n                    var btn=$('<input/>').attr({\r\n                        type: \"button\",\r\n                        value:\"Submit\",\r\n                        class:'btn btn-danger notificationmessage'\r\n                    });\r\n                    $(document).off('click').on('click', '.notificationmessage', function(){\r\n                        vm.SubmitNotification($('#allAdmin').children(\":selected\").attr(\"id\"),user.id,$('.msgAdminText').val());\r\n                    });\r\n                    $('<div id=\"notificationmessageDiv\" />').html(combo).append(textArea).append(btn).dialog({width:700,title: 'Notify Admin'});\r\n                });\r\n\r\n            };\r\n            vm.SubmitNotification=function (_TO,_FROM,_Message) {\r\n                var notification={};\r\n                notification.to_user_id=_TO;\r\n                notification.from_user_id=_FROM;\r\n                notification.notificationMsg=_Message;\r\n                $http.post(configuration.path+'/Communication/SendNotification?token=' + $auth.getToken(), JSON.stringify(notification)).success(function(data){\r\n                    $('#notificationmessageDiv').remove();\r\n                });\r\n            };\r\n            vm.logout = function () {\r\n                Logout($auth, $rootScope, $state);\r\n            };\r\n        }\r\n        else\r\n            Logout($auth, $rootScope, $state);\r\n    }\r\n})();","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('SellerRefundFormCtrl',function ($scope, $http,$auth,$rootScope,$state) {\r\n            if(user && getCookie('Role') !=null) {\r\n            $scope.reasons = [];\r\n            $scope.wishes = [];\r\n            $scope.conditions = [];\r\n\r\n            $http.get(configuration.path + '/wish').success(function (data) {\r\n                $.each(data, function (index) {\r\n                    $scope.wishes.push(data[index].Wish);\r\n                });\r\n\r\n\r\n            });\r\n            $http.get(configuration.path + '/reason').success(function (data) {\r\n                $.each(data, function (index) {\r\n                    $scope.reasons.push(data[index].Reason);\r\n                });\r\n\r\n\r\n            });\r\n            $http.get(configuration.path + '/itemCondition').success(function (data) {\r\n                $.each(data, function (index) {\r\n                    $scope.conditions.push(data[index].ItemCondition);\r\n                });\r\n\r\n\r\n            });\r\n            $scope.form = {\r\n                sellerNumber: user.id,\r\n                emailAddress: \"\",\r\n                orderNumber: \"\",\r\n                date: \"\",\r\n                price: \"\",\r\n                itemSKU: \"\",\r\n                reason: \"\",\r\n                condition: \"\",\r\n                wish: \"\"\r\n            };\r\n            $scope.logout = function () {\r\n                Logout($auth, $rootScope, $state);\r\n            }\r\n            $scope.Back = function () {\r\n                   Back($state);\r\n            }\r\n            $scope.SubmitForm = function () {\r\n                if ($scope.form.sellerNumber != \"\") {\r\n                    $http.post(configuration.path + '/Seller/GenerateRefundLink?token=' + $auth.getToken(), JSON.stringify($scope.form)).success(function (data) {\r\n\r\n                        $('<div />').html(data).dialog({\r\n                            title: 'Copy & Send To Customer', width: $(window).width() - 20,\r\n                            height: 200\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n        }else{\r\n                Logout($auth, $rootScope, $state);\r\n            }\r\n});\r\n})();\r\n","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('ManageUserCtrl', ManageUserCtrl);\r\n\r\n    function ManageUserCtrl($http, $auth, $rootScope, $state) {\r\n        if(user && getCookie('Role') !=null) {\r\n            var vm = this;\r\n            vm.refresh = function() {\r\n                vm.UserGrid = [];\r\n                vm.EditFormData='';\r\n                $http.get(configuration.path + '/api/Users?token=' + $auth.getToken()).success(function (data) {\r\n                    jQuery.each(data.users, function(i, val) {\r\n                        if(val.id == user.id){\r\n                            delete data.users[i];\r\n                        }\r\n                    });\r\n                    vm.UserGrid=data.users;\r\n\r\n                });\r\n            };\r\n            vm.refresh();\r\n            vm.EditUser=function (Data) {\r\n                vm.EditFormData=Data;\r\n                var editBox=$('#editDiv');\r\n                editBox.dialog({width:700,close:vm.refresh});\r\n                editBox.dialog('open');\r\n            };\r\n            vm.SubmitEditedForm=function () {\r\n                 var editBox=$('#editDiv');\r\n                 editBox.dialog('destroy');\r\n                $http.post(configuration.path+'/api/UpdateUser?token=' + $auth.getToken(), JSON.stringify(vm.EditFormData)).success(function(data){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.OpenAddUserForm=function () {\r\n                var UserBox=$('#addUserDiv');\r\n                UserBox.dialog({width:700,close:vm.refresh});\r\n                UserBox.dialog('open');\r\n            };\r\n            vm.SubmitNewUserForm=function () {\r\n                 var UserBox=$('#addUserDiv');\r\n                UserBox.remove();\r\n                 $http.post(configuration.path+'/api/CreateUser?token=' + $auth.getToken(), JSON.stringify(vm.EditFormData)).success(function(data){\r\n                     vm.refresh();\r\n                 });\r\n            };\r\n            vm.AttachRole=function (userData) {\r\n                $http.get(configuration.path + '/api/Roles?token=' + $auth.getToken()).success(function (data) {\r\n                    var combo = $(\"<select class='form-control' id='asnRoleSelect'></select>\");\r\n\r\n                    $.each(data, function (i, el) {\r\n                        combo.append(\"<option id=\"+ el.id +\">\" + el.name + \"</option>\");\r\n                    });\r\n                    var btn=$('<input/>').attr({\r\n                        type: \"button\",\r\n                        value:\"Attach Role\",\r\n                        style:'margin-top:2%',\r\n                        class:'btn btn-danger attachRole'\r\n                    });\r\n                    $(document).off('click').on('click', '.attachRole', function(){\r\n\r\n                        vm.AssignRole(userData);\r\n                    });\r\n                    $('<div  id=\"asnRole\"/>').html(combo).append(btn).dialog({width:700,title: 'Select Role For User'});\r\n                });\r\n            };\r\n            vm.AssignRole=function (userData) {\r\n                userData.role=$('#asnRoleSelect').children(\":selected\").attr(\"id\");\r\n                $('#asnRole').remove();\r\n                $http.post(configuration.path+'/api/AssignRole?token=' + $auth.getToken(), JSON.stringify(userData)).success(function(data){\r\n                    vm.refresh();\r\n                });\r\n\r\n            }\r\n            vm.DeleteUser=function (id) {\r\n                $http.get(configuration.path + '/api/DeleteUser/'+id+'?token=' + $auth.getToken()).success(function (data) {\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.CreateRole=function () {\r\n                alert('This Feature is under construction');\r\n            };\r\n            vm.CreatePermission=function () {\r\n                alert('This Feature is under construction');\r\n            };\r\n            vm.AttachPermissionRole=function () {\r\n                alert('This Feature is under construction');\r\n            };\r\n            vm.logout = function () {\r\n                Logout($auth, $rootScope, $state);\r\n            };\r\n            vm.Back = function () {\r\n                Back($state);\r\n            }\r\n        }\r\n        else\r\n            Logout($auth, $rootScope, $state);\r\n    }\r\n})();","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('WarehouseCtrl', WarehouseCtrl);\r\n\r\n    function WarehouseCtrl($http, $auth, $rootScope, $state) {\r\n        if(user && getCookie('Role') !=null) {\r\n            var vm = this;\r\n            vm.CasesGrid = [];\r\n            vm.reasons = [];\r\n            vm.wishes = [];\r\n            vm.conditions = [];\r\n            vm.Search='';\r\n            vm.Role=getCookie('Role');\r\n            vm.AllSellers=[];\r\n            vm.Messages='';\r\n            vm.NotificationCount=0;\r\n            vm.NotificationBoxToggle=true;\r\n            vm.StatusDropDownData={\r\n                \"1\":'Label Generated',\r\n                \"2\": 'Item Recieved at Warehouse',\r\n                \"3\":'Item Checked-Status(Dismatch)',\r\n                \"4\":'Item Checked-case in process',\r\n                \"5\":'refund-close case'\r\n            };\r\n            vm.refresh = function() {\r\n                if(vm.Search!=''){\r\n                    vm.SearchClick();\r\n                }\r\n                else if(vm.Role=='Admin') {\r\n                    $('#DetailDiv').hide();\r\n                    vm.CasesGrid = [];\r\n                    vm.EditFormData='';\r\n                    $http.get(configuration.path + '/api/AllCases?token=' + $auth.getToken()).success(function (data) {\r\n                        if(data.length >0){\r\n                            $.each(data, function (index) {\r\n                                vm.CasesGrid.push(data[index]);\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            vm.refresh();\r\n            $http.get(configuration.path+'/wish').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.wishes.push(data[index].Wish);\r\n                });\r\n            });\r\n            $http.get(configuration.path+'/reason').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.reasons.push(data[index].Reason);\r\n                });\r\n            });\r\n            $http.get(configuration.path+'/itemCondition').success(function(data){\r\n                $.each(data, function(index) {\r\n                    vm.conditions.push(data[index].ItemCondition);\r\n                });\r\n            });\r\n            vm.ReGetNotificationCount=function () {\r\n\r\n                $http.get(configuration.path + '/Communication/GetNotificationCount/' + user.id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    vm.NotificationCount = data;\r\n                });\r\n\r\n            };\r\n            vm.AllNotifications=function () {\r\n                $state.go('notification');\r\n            };\r\n            vm.ReGetNotificationCount();\r\n            NotificationInterval=setInterval(function(){  vm.ReGetNotificationCount(); }, 300000);\r\n            vm.AllNotifications=function () {\r\n                $state.go('notification');\r\n            };\r\n            vm.ShowNotifications=function () {\r\n                vm.HideDialog();\r\n                if(vm.NotificationBoxToggle){\r\n                    vm.NotificationBoxToggle=false;\r\n                    vm.Messages='';\r\n                    $http.get(configuration.path+'/Communication/GetTopFiveNotifications/'+user.id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                        if(notifications.data.length>0) {\r\n                            vm.Messages = notifications.data;\r\n                            $('#messageDiv').dialog({\r\n                                width: 300, height: 300, overflow: \"auto\", position: {\r\n                                    my: 'top',\r\n                                    at: 'bottom',\r\n                                    of: $('#notificationBtn')\r\n                                }, buttons: {\r\n                                    'ShowAll': function () {\r\n                                        vm.HideDialog();\r\n                                        vm.NotificationBoxToggle=true;\r\n                                        vm.AllNotifications();\r\n                                    },\r\n                                    'Mark All as Read': function () {\r\n                                        $http.get(configuration.path + '/Communication/MarkAllNotificationRead/' + user.id + '?token=' + $auth.getToken()).success(function () {\r\n                                            vm.HideDialog();\r\n                                            vm.NotificationBoxToggle=true;\r\n                                            vm.ReGetNotificationCount();\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                            $('#messageDiv').dialog('open');\r\n                            $(\".ui-dialog-titlebar\").remove();\r\n                        }\r\n                    });\r\n                }else{\r\n                    vm.NotificationBoxToggle=true;\r\n                }\r\n\r\n            };\r\n            vm.HideDialog=function () {\r\n                if($(\"#messageDiv\").hasClass('ui-dialog-content')){\r\n                    $('#messageDiv').hide();\r\n                    $('#messageDiv').dialog(\"destroy\");\r\n                }\r\n\r\n            };\r\n            vm.CreateNotification=function () {\r\n                    $http.get(configuration.path + '/Warehouse/GetAllSellers?token=' + $auth.getToken()).success(function (data) {\r\n                        vm.AllSellers=data;\r\n                        var combo = $(\"<select class='form-control' id='allSeller'></select>\");\r\n                        $.each(vm.AllSellers, function (i, el) {\r\n                            combo.append(\"<option id=\"+ el.id +\">\" + el.name + \"</option>\");\r\n                        });\r\n                        var textArea  = $('<textarea style=\"width: 600px; height: 200px;margin: 2%\" class=\"msgText\"/>');\r\n                        var btn=$('<input/>').attr({\r\n                            type: \"button\",\r\n                            value:\"Submit\",\r\n                            class:'btn btn-danger notificationmessage'\r\n                        });\r\n                        $(document).off('click').on('click', '.notificationmessage', function(){\r\n                            vm.SubmitNotification($('#allSeller').children(\":selected\").attr(\"id\"),user.id,$('.msgText').val());\r\n                        });\r\n                        $('<div id=\"notificationmessageDiv\" />').html(combo).append(textArea).append(btn).dialog({width:700,title: 'Notify Seller'});\r\n                    });\r\n\r\n            };\r\n            vm.SubmitNotification=function (_TO,_FROM,_Message) {\r\n                var notification={};\r\n                notification.to_user_id=_TO;\r\n                notification.from_user_id=_FROM;\r\n                notification.notificationMsg=_Message;\r\n                $http.post(configuration.path+'/Communication/SendNotification?token=' + $auth.getToken(), JSON.stringify(notification)).success(function(data){\r\n                    $('#notificationmessageDiv').remove();\r\n                });\r\n            };\r\n            vm.AddComment=function (messagecase) {\r\n                var textArea  = $('<textarea style=\"width: 674px; height: 28px;\" class=\"msgText\"/>');\r\n\r\n                var btn=$('<input/>').attr({\r\n                    type: \"button\",\r\n                    value:\"Submit\",\r\n                    style:'margin-top:2%;display:block;',\r\n                    class:'btn btn-danger sendMessage'\r\n                });\r\n                $(document).off('click').on('click', '.sendMessage', function(){\r\n                    vm.MessageSubmitted(messagecase,$('.msgText').val());\r\n                });\r\n                $('<div id=\"messageDiv\" />').html(textArea).append(btn).dialog({width:700,title: 'Add Message'});\r\n            };\r\n            vm.MessageSubmitted=function (messageCase,messageText) {\r\n                var messageobj={};\r\n                messageobj.RefundCase_Id=messageCase.RefundCase_Id;\r\n                messageobj.From_name=user.name;\r\n                messageobj.Seller_Id=messageCase.Seller_Id;\r\n                messageobj.Message=messageText;\r\n                $http.post(configuration.path+'/Communication/AddMessage?token=' + $auth.getToken(), JSON.stringify(messageobj)).success(function(data){\r\n                    $('#messageDiv').remove();\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.SearchClick=function () {\r\n                vm.CasesGrid = [];\r\n                vm.EditFormData='';\r\n                $http.get(configuration.path + '/Warehouse/ReturnedCase/'+ vm.Search +'?token=' + $auth.getToken()).success(function (data) {\r\n                    $('#DetailDiv').hide();\r\n                        if(data.length >0){\r\n                            vm.CasesGrid.push(data[0]);\r\n                            var detail= JSON.parse(data[0].RefundCaseDetail);\r\n                            vm.EditFormData=detail;\r\n                            $('#DetailDiv').show();\r\n                            }\r\n                        else {\r\n                            alert('Case Id Not Found');\r\n                        }\r\n                });\r\n            };\r\n            vm.Back=function () {\r\n                Back($state);\r\n            };\r\n            vm.UpdateStatusCase=function (caseID) {\r\n                    var combo = $(\"<select class='form-control' id='updateCaseStatus'></select>\");\r\n                    $.each(vm.StatusDropDownData, function (i, el) {\r\n                        combo.append(\"<option id=\"+ i +\">\" + el + \"</option>\");\r\n                    });\r\n                    var btn=$('<input/>').attr({\r\n                        type: \"button\",\r\n                        value:\"Submit\",\r\n                        style:'margin-top:2%',\r\n                        class:'btn btn-danger updateCaseStatus'\r\n                    });\r\n                    $(document).off('click').on('click', '.updateCaseStatus', function(){\r\n                        vm.StatusUpdate(caseID,$('#updateCaseStatus').children(\":selected\").val());\r\n                    });\r\n                    $('<div id=\"updateCaseStatusDiv\" />').html(combo).append(btn).dialog({width:700,title: 'Select Role For User'});\r\n            };\r\n            vm.StatusUpdate=function (caseID,status) {\r\n                var StatusObject={};\r\n                StatusObject.RefundCase_Id=caseID;\r\n                StatusObject.RefundCaseStatus=status;\r\n                $('#updateCaseStatusDiv').remove();\r\n                $http.post(configuration.path+'/Warehouse/UpdateCaseStatus?token=' + $auth.getToken(), JSON.stringify(StatusObject)).success(function(data){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.EditCase=function (Data) {\r\n\r\n                var detail= JSON.parse(Data.RefundCaseDetail);\r\n                vm.EditFormData=detail;\r\n                vm.EditFormData.Id=Data.RefundCase_Id;\r\n                var editBox=$('#editDiv');\r\n                editBox.dialog({width:700,close:vm.refresh});\r\n                editBox.dialog('open');\r\n            };\r\n            vm.SubmitEditedForm=function () {\r\n                var id=vm.EditFormData.Id;\r\n                /*Delete unwanted properties*/\r\n                delete vm.EditFormData.Id;\r\n                var editBox=$('#editDiv');\r\n                editBox.dialog('destroy');\r\n                $http.post(configuration.path+'/Warehouse/UpdateCaseData/'+id+ '?token=' + $auth.getToken(), JSON.stringify(vm.EditFormData)).success(function(data){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.AddImage=function (id) {\r\n                $state.go('upload',{ casedId:id });\r\n            };\r\n            vm.ShowImages=function (id) {\r\n                $http.get(configuration.path + '/File/GetAllImages/' +id + '?token=' + $auth.getToken()).success(function (data) {\r\n                    var div = $(\"<div id='allimages'></div>\");\r\n                    $.each(data, function (i, el) {\r\n                        div.append(\"<a target='_blank' href=\"+el.Image_Path+\"\\\\\"+ el.Image_Name +\" ><img src=\"+el.Image_Path+\"\\\\\"+ el.Image_Name +\" style='height: 60px;width: 60px;margin:10px;border:2px solid black;border-radius: 5px;' /></a>\");\r\n                    });\r\n                    $('<div />').html(div).dialog();\r\n                });\r\n            };\r\n            vm.logout = function () {\r\n                Logout($auth, $rootScope, $state);\r\n            };\r\n        }\r\n        else\r\n            Logout($auth, $rootScope, $state);\r\n    }\r\n})();","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('NotificationCtrl', NotificationCtrl);\r\n\r\n    function NotificationCtrl($http, $auth, $rootScope, $state) {\r\n        if(user && getCookie('Role') !=null) {\r\n            var vm = this;\r\n            vm.NotificationsGrid='';\r\n            vm.Messages='';\r\n            vm.Role=getCookie('Role');\r\n            vm.refresh=function () {\r\n                vm.NotificationsGrid='';\r\n                $http.get(configuration.path+'/Communication/GetAllNotifications/'+user.id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                    if(notifications.length>0) {\r\n                        vm.NotificationsGrid = notifications;\r\n                    }\r\n                });\r\n            };\r\n            vm.refresh();\r\n            vm.MarkRead=function (id) {\r\n                $http.get(configuration.path+'/Communication/MarkRead/'+id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.MarkUnRead=function (id) {\r\n                $http.get(configuration.path+'/Seller/MarkUnRead/'+id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.ForwardNotification=function (id) {$http.get(configuration.path + '/api/AllWarehouseUsers?token=' + $auth.getToken()).success(function (data) {\r\n                vm.AllSellers=data;\r\n                var combo = $(\"<select class='form-control' id='allWarehouse'></select>\");\r\n                $.each(vm.AllSellers, function (i, el) {\r\n                    combo.append(\"<option id=\"+ el.id +\">\" + el.name + \"</option>\");\r\n                });\r\n                var btn=$('<input/>').attr({\r\n                    type: \"button\",\r\n                    value:\"Submit\",\r\n                    class:'btn btn-danger notificationmessage'\r\n                });\r\n                $(document).off('click').on('click', '.notificationmessage', function(){\r\n                    vm.SubmitFWDNotification($('#allWarehouse').children(\":selected\").attr(\"id\"),id);\r\n                });\r\n                $('<div id=\"notificationmessageDiv\" />').html(combo).append(btn).dialog({width:700,title: 'forward to warehouse'});\r\n            });\r\n\r\n            };\r\n            vm.SubmitFWDNotification=function (_TO,_ID) {\r\n                var notification={};\r\n                notification.to_user_id=_TO;\r\n                notification.id=_ID;\r\n                $http.post(configuration.path+'/api/UpdateNotification?token=' + $auth.getToken(), JSON.stringify(notification)).success(function(data){\r\n                    $('#notificationmessageDiv').remove();\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.ReplyMessage=function (NotificationMessage) {\r\n\r\n                    var textArea  = $('<textarea style=\"width: 600px; height: 200px;margin: 2%\" class=\"msgText\"/>');\r\n                    var btn=$('<input/>').attr({\r\n                        type: \"button\",\r\n                        value:\"Submit\",\r\n                        class:'btn btn-danger notificationmessage'\r\n                    });\r\n                    $(document).off('click').on('click', '.notificationmessage', function(){\r\n                        vm.SubmitNotification(NotificationMessage,user.id,$('.msgText').val());\r\n                    });\r\n                    $('<div id=\"notificationmessageDiv\" />').html(textArea).append(btn).dialog({width:700,title: 'Reply'});\r\n\r\n            };\r\n            vm.MessageChain=function (id) {\r\n                vm.Messages='';\r\n                $http.get(configuration.path+'/Communication/GetChainNotifications/'+id+ '?token=' + $auth.getToken()).success(function(notifications){\r\n                    vm.Messages=notifications;\r\n                    $('#messageDiv').dialog({width:400,title:'Messages',height:500, overflow:\"auto\"});\r\n                    $('#messageDiv').dialog('open');\r\n\r\n                } );\r\n            };\r\n            vm.SubmitNotification=function (NotificationMessage,_FROM,_Message) {\r\n\r\n                var notification={};\r\n                notification.parent_id=NotificationMessage.Id;\r\n                notification.to_user_id=NotificationMessage.ReplyBackTo;\r\n                notification.from_user_id=_FROM;\r\n                notification.notificationMsg=_Message;\r\n                $http.post(configuration.path+'/Communication/ReplyNotification?token=' + $auth.getToken(), JSON.stringify(notification)).success(function(data){\r\n                    $('#notificationmessageDiv').remove();\r\n                    vm.refresh();\r\n                });\r\n            };\r\n            vm.Back=function () {\r\n                Back($state);\r\n            };\r\n            vm.logout = function () {\r\n                Logout($auth, $rootScope, $state);\r\n            };\r\n        }else{\r\n            Logout($auth, $rootScope, $state);\r\n        }\r\n\r\n    }\r\n})();\r\n","(function() {\r\n\r\n    'use strict';\r\n    angular\r\n        .module('RefundSystemApp')\r\n        .controller('UploaderCntrl', ['$scope', 'FileUploader','$stateParams','$state', function($scope, FileUploader,$stateParams,$state) {\r\n            $scope.Back=function () {\r\n                Back($state);\r\n            };\r\n            var uploader = $scope.uploader = new FileUploader({\r\n                url: configuration.path + '/File/Upload/'+$stateParams.casedId\r\n            });\r\n\r\n            // FILTERS\r\n\r\n            uploader.filters.push({\r\n                name: 'imageFilter',\r\n                fn: function(item /*{File|FileLikeObject}*/, options) {\r\n                    var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';\r\n                    return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;\r\n                }\r\n            });\r\n\r\n            // CALLBACKS\r\n\r\n            uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n                uploader.removeFromQueue(fileItem);\r\n            };\r\n            uploader.onErrorItem = function(fileItem, response, status, headers) {\r\n                console.info('onErrorItem', fileItem, response, status, headers);\r\n            };\r\n\r\n        }]);\r\n})();"],"sourceRoot":"/source/"}